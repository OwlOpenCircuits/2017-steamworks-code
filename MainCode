package org.usfirst.frc.team5271.robot;

import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.TalonSRX;
import edu.wpi.first.wpilibj.Timer; 

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {
	final String defaultAuto = "Default";
	final String customAuto = "My Auto";
	String autoSelected;
	SendableChooser<String> chooser = new SendableChooser<>();
	Spark frntrght = new Spark(1);
	Spark bckrght = new Spark(2); 
    Spark frntlft = new Spark(5); 
    Spark bcklft = new Spark(6);
    Talon middle = new Talon(3); // middle wheel 
    Talon middle_2 = new Talon(4); // other middle wheel 
    TalonSRX climbing = new TalonSRX(7); // climbing motor 
    Joystick driveStick = new Joystick(0); //defining the joystick
    
    public void chassis_drive (double power, double time){
    	frntlft.set(-power);
		frntrght.set(power);
		bcklft.set(-power);
		bckrght.set(power);
		Timer.delay(time);
		frntlft.set(0);
		frntrght.set(0);
		bcklft.set(0);
		bckrght.set(0);
    }
    
    public void drive_robot (double vertical, double horizontal, double turn) { 
		System.out.println("vertical:"+ vertical + " Horizontal:" + horizontal);
		//maps from range of the joystick to the range of the motor power
		//vertical = mapping(vertical,-1,1,-power,power); 
		//horizontal = mapping(horizontal,-1,1,-power,power);
		// actually drives the robot 
		frntlft.set(-vertical/2);
		frntrght.set(vertical/2);
		bcklft.set(-vertical/2);
		bckrght.set(vertical/2);
		middle.set(-horizontal/3);
		middle_2.set(-horizontal/3);
		Timer.delay(0.1);
		middle.set(0);
		middle_2.set(0);
		frntlft.set(0);
		frntrght.set(0);
		bcklft.set(0);
		bckrght.set(0);
    }
    
    public void turning(double turn){
    	frntlft.set(turn/2);
		frntrght.set(turn/2);
		bcklft.set(turn/2);
		bckrght.set(turn/2);
		Timer.delay(0.1);
		frntlft.set(0);
		frntrght.set(0);
		bcklft.set(0);
		bckrght.set(0);
    }
    public void climb_robot(double power){
		climbing.set(power);
		Timer.delay(0.1);
		climbing.set(0);
	}
	/**
	 * This function is run when the robot is first started up and should be
	 * used for any initialization code.
	 */
	@Override
	public void robotInit() {
		chooser.addDefault("Default Auto", defaultAuto);
		chooser.addObject("My Auto", customAuto);
		SmartDashboard.putData("Auto choices", chooser);
	}

	/**
	 * This autonomous (along with the chooser code above) shows how to select
	 * between different autonomous modes using the dashboard. The sendable
	 * chooser code works with the Java SmartDashboard. If you prefer the
	 * LabVIEW Dashboard, remove all of the chooser code and uncomment the
	 * getString line to get the auto name from the text box below the Gyro
	 *
	 * You can add additional auto modes by adding additional comparisons to the
	 * switch structure below with additional strings. If using the
	 * SendableChooser make sure to add them to the chooser code above as well.
	 */
	@Override
	public void autonomousInit() {
		autoSelected = chooser.getSelected();
		// autoSelected = SmartDashboard.getString("Auto Selector",
		// defaultAuto);
		System.out.println("Auto selected: " + autoSelected);
		frntlft.set(-0.5);
		frntrght.set(0.5);
		bcklft.set(-0.5);
		bckrght.set(0.5);
		Timer.delay(0.5);
		frntlft.set(0);
		frntrght.set(0);
		bcklft.set(0);
		bckrght.set(0);
	}

	/**
	 * This function is called periodically during autonomous
	 */
	@Override
	public void autonomousPeriodic() {
		switch (autoSelected) {
		case customAuto:
			// Put custom auto code here
			break;
		case defaultAuto:
		default:
			// Put default auto code here
			break;
		}
	}

	/**
	 * This function is called periodically during operator control
	 */
	@Override
	public void teleopPeriodic() {
		if(driveStick.getRawButton(7) == false) { // emergency stop coded into all teleop functions
	    	//Drive at an angle 
	    	if(Math.abs(driveStick.getRawAxis(0)) > .1 || (Math.abs(driveStick.getRawAxis(1)) > .1)) { //if left joystick is being moved 
				// get raw axis 0-1 for left joystick 0 is left/right 1 is up/down
	    		System.out.println("Drive with left joy stick");
	    		double vertical = driveStick.getRawAxis(1); // get the joystick value for the up/down control
	    		double horizontal = driveStick.getRawAxis(0); // get the joystick value for the left/right control 
	    		double turn = driveStick.getRawAxis(4);
	    		drive_robot(vertical, horizontal,turn);// drive the robot
				
			}
	
				
			if(Math.abs(driveStick.getRawAxis(4)) > .2) { // driving with the right joystick on the Xbox controller
				double turn = driveStick.getRawAxis(4);
				if (turn > 0){
					turning(1);
				}
				else {
					turning(-1);
				}
				//turning(turn);
				//chassis.arcadeDrive(0, turn/2); // right joystick on Xbox, for spinning. first value is 0 because we don't use this one to move, second value gets the spin
			}
			
			if(driveStick.getRawAxis(3) > 0.5){
				climb_robot(0.5);
			}
			if(driveStick.getRawAxis(2) > 0.5){
				climb_robot(-0.5);
			}
			if(driveStick.getRawButton(3)== true){ // Y button 
				chassis_drive(0.5,0.5);
			}
			if(driveStick.getRawButton(1)== true){//B button 
				middle.set(0.5);
				middle_2.set(0.5);
				Timer.delay(0.5);
				middle.set(0);
				middle_2.set(0);
			}
			if(driveStick.getRawButton(0)== true){// A button
				chassis_drive(-0.5,0.5);
			}
			if(driveStick.getRawButton(2)== true){ // X button 
				middle.set(-0.5);
				middle_2.set(-0.5);
				Timer.delay(0.5);
				middle.set(0);
				middle_2.set(0);
			}
    	}
	}

	/**
	 * This function is called periodically during test mode
	 */
	@Override
	public void testPeriodic() {
	}
}

