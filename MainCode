package org.usfirst.frc.team5271.robot;

import edu.wpi.first.wpilibj.IterativeRobot; // all the imports, all the time
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.TalonSRX;
import edu.wpi.first.wpilibj.DigitalInput;
//import math 
/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
//defining the varriables that exist inside the class robot
public class Robot extends IterativeRobot {
    final String defaultAuto = "Default"; // setting the thing to the thing (Max this requires you to comment on)
    final String customAuto = "My Auto"; 
    String autoSelected; // variable to select the auto code
    RobotDrive chassis = new RobotDrive(3, 4, 5, 6); // initializing the driving motors
    TalonSRX middle = new TalonSRX(7); // middle wheel 
    Joystick driveStick = new Joystick(0); //initializing the joystick
	Spark elev1 = new Spark(1); // initializing the spark motor controllers (scaling arm)
	Spark elev2 = new Spark(2);
	CameraServer server;
	TalonSRX elev3 = new TalonSRX(8); // initializing the TalonSRX motor controller for the smashing arm (SMASH)
	DigitalInput limitSwitch = new DigitalInput(7); // Potential limit switch thing for the scaling arm  
	public void drive (double angle, double power) { 
		angle = Math.toRadians(angle); // convert angle to radians 
		double vertical = Math.sin(angle); // find sin of angle 
		double horizontal = Math.cos(angle); // find cos of angle 
		// map sin and cos varriables inbetween power and -power 
		chassis.drive(vertical, 0);
		middle.set(horizontal);
	}
	  /*
     This function is run when the robot is first started up and should be
     used for any initialization code.
     */
    public void robotInit() { // initializing of the other things in the robit
        chassis.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, true); // inverting the direction of the motors so the robot can actually drive (thanks Obama)
        chassis.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
        chassis.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
        chassis.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
        server = CameraServer.getInstance();
        server.setQuality(50);
        server.startAutomaticCapture("cam0");
        chassis.setSafetyEnabled(true); // watchdog program so that it can shut down if necessary (?)
        // Timer timer = new Timer();
    }	
	
	public void elevate(double power) { // function for the scaling arm elevation
		elev1.set(power);
		elev2.set(power);
	}
	
	public void smash(double power) { // function to call for smashing arm smashing
		elev3.set(power);
	}
	
  
        
	/**
	 * This autonomous (along with the chooser code above) shows how to select between different autonomous modes
	 * using the dashboard. The sendable chooser code works with the Java SmartDashboard. If you prefer the LabVIEW
	 * Dashboard, remove all of the chooser code and uncomment the getString line to get the auto name from the text box
	 * below the Gyro
	 *
	 * You can add additional auto modes by adding additional comparisons to the switch structure below with additional strings.
	 * If using the SendableChooser make sure to add them to the chooser code above as well.
	 */
    public void autonomousInit() {
    	Timer timer = new Timer();
    	int autoChooser = 2;
    	if (autoChooser == 0) { // place for the first autonomous code (rough terrain)
    		timer.reset();
			timer.start();
			while (timer.get() <= 2.6) { // 2 seconds for rough; 2.3 for moat; 2.45 for rock wall;
				chassis.drive(-0.55, 0);
				
			}
        }
    	
    	if (autoChooser == 1) { // place for the second autonomous code (moat)
    		timer.reset();
			timer.start();
			while (timer.get() <= 2.6) { // 2 seconds for rough; 2.3 for moat; 2.45 for rock wall;
				chassis.drive(-0.55, 0);

			}
    	}
    	if (autoChooser == 2) { // place for third autonomous code (rock wall)
    		timer.reset();
			timer.start();
			while (timer.get() <= 2.6) { // 2 seconds for rough; 2.3 for moat; 2.45 for rock wall;
				chassis.drive(-0.55, 0);

			}
        }
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {

    	
    	}

    

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() { // teleop code
    	if(driveStick.getRawButton(7) == false) { // emergency stop coded into all teleop functions
    		
    		// chassis.arcadeDrive(driveStick, true); // drive with joysticks 
    		if(Math.abs(driveStick.getRawAxis(0)) > .2 || (Math.abs(driveStick.getRawAxis(1)) > .2)) { //driving with the left joystick on the Xbox controller
    			chassis.arcadeDrive(driveStick.getRawAxis(1) / 2, driveStick.getRawAxis(0) / 2); // left joystick on Xbox
    		}
    			
    		if(Math.abs(driveStick.getRawAxis(4)) > .2 || (Math.abs(driveStick.getRawAxis(5)) > .2)) { // driving with the right joystick on the Xbox controller
    			chassis.arcadeDrive(driveStick.getRawAxis(5) / 1.25, driveStick.getRawAxis(4) / 1.25); // right joystick on Xbox, orginally divided by 1.25
    		}
    		Timer.delay(0.05);
    	}
    	
    	
    	
    	if((driveStick.getRawButton(7) == false)) { // Big arm up and down
    		if(driveStick.getRawButton(4) == true) {
    			elevate(.4); // up
    		}
    		else if (driveStick.getRawButton(1) == true) {
    			elevate(-.35); // down
    		}
    		else if(driveStick.getRawAxis(2) >= 0.05) {
        		elevate(driveStick.getRawAxis(2) / 1.5);
        	}
        	
    		else if(driveStick.getRawAxis(3) >= 0.05) {
        		elevate(-.66 * driveStick.getRawAxis(3));
        	}
    		else {
    			elevate(0);
    		}
    	}
    	
    	if(driveStick.getRawButton(7) == false) { // Short arm up and down
    		if (driveStick.getRawButton(6) == true) {
    			smash(.8); // Slam the thing
    		}
    		else if (driveStick.getRawButton(5) == true) {
    			smash(-.65); // Pull back in
    		}
    		else {
    			smash(0);
    		}
    	}
    	
    	//This is an attempt at the slide drive mechanism for the 2017 robot
    	if(Math.abs(driveStick.getRawAxis(0)) > .2 || (Math.abs(driveStick.getRawAxis(1)) > .2)) { //driving with the left joystick on the Xbox controller
			chassis.arcadeDrive(driveStick.getRawAxis(1) / 1.5, driveStick.getRawAxis(0) / 1.5); // left joystick on Xbox
		}
    	
    	if(Math.abs(driveStick.getRawAxis(2)) > .2 || (Math.abs(driveStick.getRawAxis(3)) > .2)) { //driving with Arrows on the Xbox controller
			chassis.arcadeDrive(driveStick.getRawAxis(3) / 2.5, 0); // Arrows on Xbox, same as Left stick, but for smaller adjstments
			//driveStick.getRawAxis(2) / 2.5
		}
			
		if(Math.abs(driveStick.getRawAxis(4)) > .2) { // driving with the right joystick on the Xbox controller
			chassis.arcadeDrive(0, driveStick.getRawAxis(4) / 2); // right joystick on Xbox, for spinning. first value is 0 because we don't use this one to move, second value gets the spin
		}
    }
    
    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
    
    }
    
}
